generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique(map: "email") @db.VarChar(255)
  profileImage String?     @map("profile_image") @db.VarChar(255)
  createdAt    DateTime?   @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime?   @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  clerkId      String      @unique(map: "clerk_id") @db.VarChar(255)
  firstName    String?
  lastName     String?
  userStores   UserStore[]

  @@index([email], map: "idx_email")
  @@index([clerkId], map: "idx_clerk_id")
  @@map("users")
}

model UserStore {
  id           Int               @id @default(autoincrement())
  userId       Int               @map("user_id")
  storeName    String            @map("store_name") @db.VarChar(255)
  storeId      String            @map("store_id") @db.VarChar(255)
  createdAt    DateTime?         @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime?         @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store_config Json?
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     Product[]
  categories   Category[]
  customers    StoreCustomer[]
  orders       Order[]
  coupons      Coupon[]

  @@unique([userId, storeName], map: "user_id")
  @@index([userId], map: "idx_user_id")
  @@map("user_stores")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  storeId   Int       @map("store_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  store     UserStore @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products  Product[]

  @@index([storeId], map: "idx_category_store_id")
  @@map("categories")
}

model Product {
  id         Int           @id @default(autoincrement())
  name       String        @db.VarChar(255)
  description String?      @db.Text
  price      Float         
  stockLevel Int           @default(0) @map("stock_level")
  isActive   Boolean       @default(true) @map("is_active")
  storeId    Int           @map("store_id")
  categoryId Int?          @map("category_id")
  createdAt  DateTime?     @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt  DateTime?     @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store      UserStore     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category   Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images     ProductImage[]
  orderItems OrderItem[]

  @@index([storeId], map: "idx_product_store_id")
  @@index([categoryId], map: "idx_product_category_id")
  @@map("products")
}

model ProductImage {
  id        Int       @id @default(autoincrement())
  productId Int       @map("product_id")
  url       String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "idx_product_image_product_id")
  @@map("product_images")
}

model StoreCustomer {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(255)
  firstName String?   @map("first_name") @db.VarChar(255)
  lastName  String?   @map("last_name") @db.VarChar(255)
  phone     String?   @db.VarChar(50)
  address   String?   @db.Text
  storeId   Int       @map("store_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  store     UserStore @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@unique([storeId, email], map: "store_customer_email")
  @@index([storeId], map: "idx_store_customer_store_id")
  @@map("store_customers")
}

model Order {
  id           Int           @id @default(autoincrement())
  orderNumber  String        @unique @map("order_number") @db.VarChar(50)
  storeId      Int           @map("store_id")
  customerId   Int           @map("customer_id") 
  status       OrderStatus   @default(PENDING)
  total        Float        
  address      String?       @db.Text
  paymentMethod PaymentMethod @default(CREDIT_CARD) @map("payment_method")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  couponId     Int?          @map("coupon_id")
  discountAmount Float?      @default(0) @map("discount_amount")
  createdAt    DateTime?     @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store        UserStore     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customer     StoreCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  coupon       Coupon?       @relation(fields: [couponId], references: [id], onDelete: SetNull)
  orderItems   OrderItem[]

  @@index([storeId], map: "idx_order_store_id")
  @@index([customerId], map: "idx_order_customer_id")
  @@index([couponId], map: "idx_order_coupon_id")
  @@map("orders")
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int       @map("order_id")
  productId   Int       @map("product_id")
  quantity    Int
  price       Float     
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "idx_order_item_order_id")
  @@index([productId], map: "idx_order_item_product_id")
  @@map("order_items")
}

model Coupon {
  id              Int         @id @default(autoincrement())
  code            String      @db.VarChar(50)
  storeId         Int         @map("store_id")
  discountType    DiscountType @default(PERCENTAGE) @map("discount_type")
  discountValue   Float       @map("discount_value")
  minPurchase     Float?      @map("min_purchase")
  startDate       DateTime    @map("start_date") @db.DateTime(0)
  endDate         DateTime    @map("end_date") @db.DateTime(0)
  isActive        Boolean     @default(true) @map("is_active")
  usageLimit      Int?        @map("usage_limit")
  usageCount      Int         @default(0) @map("usage_count")
  createdAt       DateTime?   @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime?   @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store           UserStore   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders          Order[]

  @@unique([storeId, code], map: "store_coupon_code")
  @@index([storeId], map: "idx_coupon_store_id")
  @@map("coupons")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  
  
  CASH_ON_DELIVERY
 
  
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
