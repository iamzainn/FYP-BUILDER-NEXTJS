generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique(map: "email") @db.VarChar(255)
  profileImage String?     @map("profile_image") @db.VarChar(255)
  createdAt    DateTime    @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  clerkId      String      @unique(map: "clerk_id") @db.VarChar(255)
  firstName    String?
  lastName     String?
  userStores   UserStore[]

  @@index([email], map: "idx_email")
  @@index([clerkId], map: "idx_clerk_id")
  @@map("users")
}

model UserStore {
  id              Int              @id @default(autoincrement())
  userId          Int              @map("user_id")
  storeName       String           @map("store_name") @db.VarChar(255)
  storeId         String           @map("store_id") @db.VarChar(255)
  subdomain       String           @unique @db.VarChar(255)
  createdAt       DateTime         @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store_config    Json?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  products        Product[]
  categories      Category[]
  customers       StoreCustomer[]
  orders          Order[]
  discounts       Discount[]
  pages           Page[]
  paymentGateways PaymentGateway[]
  notifications   Notification[]
  Media           Media[]
  feedback        CustomerFeedback[]

  @@unique([userId, storeName], map: "user_id")
  @@index([userId], map: "idx_user_id")
  @@map("user_stores")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  storeId   Int       @map("store_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  store     UserStore @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products  Product[]

  @@index([storeId], map: "idx_category_store_id")
  @@map("categories")
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(255)
  description String?           @db.Text
  price       Float
  stockLevel  Int               @default(0) @map("stock_level")
  isActive    Boolean           @default(true) @map("is_active")
  storeId     Int               @map("store_id")
  categoryId  Int?              @map("category_id")
  createdAt   DateTime          @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store       UserStore         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category    Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images      ProductImage[]
  orderItems  OrderItem[]
  discounts   DiscountProduct[]

  @@index([storeId], map: "idx_product_store_id")
  @@index([categoryId], map: "idx_product_category_id")
  @@map("products")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "idx_product_image_product_id")
  @@map("product_images")
}

model StoreCustomer {
  id            Int                     @id @default(autoincrement())
  email         String                  @db.VarChar(255)
  firstName     String?                 @map("first_name") @db.VarChar(255)
  lastName      String?                 @map("last_name") @db.VarChar(255)
  phone         String?                 @db.VarChar(50)
  address       String?                 @db.Text
  storeId       Int                     @map("store_id")
  createdAt     DateTime                @default(now()) @map("created_at") @db.DateTime(0)
  store         UserStore               @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders        Order[]
  discountUsage DiscountCustomerUsage[]
  feedback      CustomerFeedback[]

  @@unique([storeId, email], map: "store_customer_email")
  @@index([storeId], map: "idx_store_customer_store_id")
  @@map("store_customers")
}

model Order {
  id             Int           @id @default(autoincrement())
  orderNumber    String        @unique @map("order_number") @db.VarChar(50)
  storeId        Int           @map("store_id")
  customerId     Int           @map("customer_id")
  status         OrderStatus   @default(PENDING)
  total          Float
  address        String?       @db.Text
  paymentMethod  PaymentMethod @default(CREDIT_CARD) @map("payment_method")
  paymentStatus  PaymentStatus @default(PENDING) @map("payment_status")
  discountAmount Float?        @default(0) @map("discount_amount")
  createdAt      DateTime      @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  discountId     Int?          @map("discount_id")
  store          UserStore     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customer       StoreCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  discount       Discount?     @relation(fields: [discountId], references: [id], onDelete: SetNull)
  orderItems     OrderItem[]

  @@index([storeId], map: "idx_order_store_id")
  @@index([customerId], map: "idx_order_customer_id")
  @@index([discountId], map: "idx_order_discount_id")
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "idx_order_item_order_id")
  @@index([productId], map: "idx_order_item_product_id")
  @@map("order_items")
}

model Discount {
  id                 Int                     @id @default(autoincrement())
  couponCode         String                  @db.VarChar(50)
  storeId            Int                     @map("store_id")
  discountType       DiscountType            @default(PERCENTAGE) @map("discount_type")
  discountValue      Float                   @map("discount_value")
  startDate          DateTime                @map("start_date") @db.DateTime(0)
  endDate            DateTime                @map("end_date") @db.DateTime(0)
  isActive           Boolean                 @default(true) @map("is_active")
  usageLimit         Int?                    @map("usage_limit")
  usageCount         Int                     @default(0) @map("usage_count")
  perCustomerServing Boolean                 @default(false) @map("per_customer_serving")
  maxUsesPerCustomer Int?                    @default(1) @map("max_uses_per_customer")
  createdAt          DateTime                @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt          DateTime                @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  products           DiscountProduct[]
  store              UserStore               @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders             Order[]
  customerUsage      DiscountCustomerUsage[]

  @@unique([storeId, couponCode], map: "store_discount_code")
  @@index([storeId], map: "idx_discount_store_id")
  @@map("discounts")
}

model DiscountCustomerUsage {
  id         Int           @id @default(autoincrement())
  discountId Int           @map("discount_id")
  customerId Int           @map("customer_id")
  usageCount Int           @default(0) @map("usage_count")
  createdAt  DateTime      @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt  DateTime      @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  discount   Discount      @relation(fields: [discountId], references: [id], onDelete: Cascade)
  customer   StoreCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([discountId, customerId])
  @@index([discountId], map: "idx_discount_customer_usage_discount_id")
  @@index([customerId], map: "idx_discount_customer_usage_customer_id")
  @@map("discount_customer_usage")
}

model DiscountProduct {
  id         Int      @id @default(autoincrement())
  discountId Int      @map("discount_id")
  productId  Int      @map("product_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.DateTime(0)
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([discountId, productId])
  @@index([discountId], map: "idx_discount_product_discount_id")
  @@index([productId], map: "idx_discount_product_product_id")
  @@map("discount_products")
}

model Page {
  id          Int             @id @default(autoincrement())
  storeId     Int             @map("store_id")
  title       String          @db.VarChar(255)
  slug        String          @db.VarChar(255)
  isPublished Boolean         @default(false) @map("is_published")
  pageType    PageType        @default(CUSTOM) @map("page_type")
  pageOrder   Int             @default(0) @map("page_order")
  createdAt   DateTime        @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store       UserStore       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  components  PageComponent[]

  @@unique([storeId, slug])
  @@index([storeId], map: "idx_page_store_id")
  @@map("pages")
}

model PageComponent {
  id            Int      @id @default(autoincrement())
  pageId        Int      @map("page_id")
  componentType String   @map("component_type") @db.VarChar(50)
  content       Json
  order         Int      @default(0)
  createdAt     DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  page          Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId], map: "idx_page_component_page_id")
  @@map("page_components")
}

model PaymentGateway {
  id            Int       @id @default(autoincrement())
  storeId       Int       @map("store_id")
  provider      String    @default("SQUARE") @db.VarChar(50)
  accessToken   String    @map("access_token") @db.VarChar(255)
  locationId    String?   @map("location_id") @db.VarChar(255)
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  applicationId String?   @map("application_id") @db.VarChar(255)
  environment   String    @default("sandbox") @map("environment") @db.VarChar(50)
  store         UserStore @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId], map: "idx_payment_gateway_store_id")
  @@map("payment_gateways")
}

model Notification {
  id          Int                  @id @default(autoincrement())
  title       String               @db.VarChar(255)
  content     String               @db.Text
  type        NotificationType     @default(SYSTEM_ALERT)
  priority    NotificationPriority @default(MEDIUM)
  actionUrl   String?              @db.VarChar(255)
  createdAt   DateTime             @default(now())
  data        String?              @db.Text
  isRead      Boolean              @default(false)
  storeId     String
  updatedAt   DateTime             @default(now()) @updatedAt
  userStoreId Int?
  UserStore   UserStore?           @relation(fields: [userStoreId], references: [id])

  @@index([storeId])
  @@index([userStoreId])
  @@map("notifications")
}

model Media {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?   @db.Text
  url         String    @db.VarChar(255)
  fileKey     String    @db.VarChar(255)
  mediaType   MediaType @default(IMAGE)
  storeId     Int       @map("store_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store       UserStore @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId], map: "idx_media_store_id")
  @@map("media")
}

model CustomerFeedback {
  id          Int           @id @default(autoincrement())
  feedback    String        @db.Text
  rating      Int?          @default(5) // Optional rating out of 5
  storeId     Int           @map("store_id")
  customerId  Int           @map("customer_id")
  isRead      Boolean       @default(false) @map("is_read")
  isImportant Boolean       @default(false) @map("is_important")
  createdAt   DateTime      @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  store       UserStore     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customer    StoreCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([storeId], map: "idx_feedback_store_id")
  @@index([customerId], map: "idx_feedback_customer_id")
  @@map("customer_feedback")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  SQUARE
  CASH_ON_DELIVERY
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PageType {
  HOME
  PRODUCTS
  ABOUT
  CONTACT
  CHECKOUT
  CUSTOM
}

enum NotificationType {
  ORDER_PLACED
  PAYMENT_RECEIVED
  LOW_STOCK
  ORDER_STATUS_CHANGED
  NEW_CUSTOMER
  SYSTEM_ALERT
  PRODUCT_CREATED
  PRODUCT_UPDATED
  PRODUCT_DELETED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}
